import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import LoadingPage from "~/components/LoadingPage";
import Nav from "~/components/Nav";

const SingleProductPage: NextPage<{ productId: string }> = ({ productId }) => {
  const { data, isLoading: productsLoading } = api.products.getAll.useQuery();

  // Not needed bc getStaticProps and getStaticPaths
  //   if (userLoading) return <div>Loading...</div>;

  if (!data) return <div>404</div>;

  console.log(productId);
  // console.log(user); from useUser()

  // Start fetching asap
  // api.products.getAll.useQuery();

  // Return empty div if user isn't loaded yet
  if (productsLoading) return <div />;

  return (
    <>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col justify-between">
        <Nav />

        <section className="flex flex-wrap justify-center">
          {/* <Feed /> */}
          {productId}
        </section>
        <Footer />
      </main>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import superjson from "superjson";
import { prisma } from "~/server/db";
import Footer from "~/components/Footer";

export const getStaticProps: GetStaticProps = async (context) => {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, currentUserId: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const id = context.params?.id;

  console.log("SLUGGG", id);

  if (typeof id !== "string") throw new Error("No slug");

  await helpers.productId.getProductById.prefetch({ productId: id });

  return {
    props: {
      trpcState: helpers.dehydrate(),
      productId: id,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default SingleProductPage;
